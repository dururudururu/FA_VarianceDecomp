```R
function (model = NULL, data = NULL, ordered = NULL, sampling.weights = NULL, 
    sample.cov = NULL, sample.mean = NULL, sample.th = NULL, 
    sample.nobs = NULL, group = NULL, cluster = NULL, constraints = "", 
    WLS.V = NULL, NACOV = NULL, slotOptions = NULL, slotParTable = NULL, 
    slotSampleStats = NULL, slotData = NULL, slotModel = NULL, 
    slotCache = NULL, sloth1 = NULL, ...) 
{
    start.time0 <- start.time <- proc.time()[3]
    timing <- list()
    mc <- match.call(expand.dots = TRUE)
    dotdotdot <- list(...)
    if (!is.null(dotdotdot$control)) {
        if (!is.null(dotdotdot$control$optim.method)) {
            dotdotdot$optim.method <- dotdotdot$control$optim.method
        }
        if (!is.null(dotdotdot$control$cor.optim.method)) {
            dotdotdot$optim.method.cor <- dotdotdot$control$cor.optim.method
        }
        if (!is.null(dotdotdot$control$optim.force.converged)) {
            dotdotdot$optim.force.converged <- dotdotdot$control$optim.force.converged
        }
        if (!is.null(dotdotdot$control$gradient)) {
            dotdotdot$optim.gradient <- dotdotdot$control$gradient
        }
        if (!is.null(dotdotdot$gradient)) {
            dotdotdot$optim.gradient <- dotdotdot$gradient
        }
        if (!is.null(dotdotdot$control$init_nelder_mead)) {
            dotdotdot$optim.init_nelder_mead <- dotdotdot$control$init_nelder_mead
        }
    }
    if (!is.null(slotParTable)) {
        FLAT <- slotParTable
    }
    else if (is.character(model)) {
        FLAT <- lavParseModelString(model)
    }
    else if (inherits(model, "formula")) {
        tmp <- as.character(model)
        if (tmp[1] == "~" && length(tmp) == 2L) {
            warning("lavaan WARNING: model seems to be a formula; please enclose the model syntax between quotes")
            model.bis <- paste("f =", paste(tmp, collapse = " "), 
                sep = "")
            FLAT <- lavParseModelString(model.bis)
        }
        else if (tmp[1] == "~" && length(tmp) == 3L) {
            warning("lavaan WARNING: model seems to be a formula; please enclose the model syntax between quotes")
            model.bis <- paste(tmp[2], tmp[1], tmp[3])
            FLAT <- lavParseModelString(model.bis)
        }
        else {
            stop("lavaan ERROR: model seems to be a formula; please enclose the model syntax between quotes")
        }
    }
    else if (inherits(model, "lavaan")) {
        FLAT <- parTable(model)
    }
    else if (is.list(model)) {
        if (!is.null(model$lhs) && !is.null(model$op) && !is.null(model$rhs) && 
            !is.null(model$free)) {
            FLAT <- model
            if (!is.null(FLAT$block)) {
                N <- length(FLAT$lhs)
                if (length(FLAT$block) != N) {
                  FLAT$block <- FLAT$group
                }
                if (any(is.na(FLAT$block))) {
                  FLAT$block <- FLAT$group
                }
            }
            else if (!is.null(FLAT$group)) {
                FLAT$block <- FLAT$group
            }
        }
        else {
            bare.minimum <- c("lhs", "op", "rhs", "free")
            missing.idx <- is.na(match(bare.minimum, names(model)))
            missing.txt <- paste(bare.minimum[missing.idx], collapse = ", ")
            stop("lavaan ERROR: model is a list, but not a parameterTable?", 
                "\n  lavaan  NOTE: ", "missing column(s) in parameter table: [", 
                missing.txt, "]")
        }
    }
    else if (is.null(model)) {
        stop("lavaan ERROR: model is NULL!")
    }
    if (any(FLAT$op == ":" & tolower(FLAT$lhs) == "group")) {
        group.idx <- which(FLAT$op == ":" & tolower(FLAT$lhs) == 
            "group")
        FLAT$lhs[group.idx] <- "group"
        tmp.group.values <- unique(FLAT$rhs[group.idx])
        tmp.ngroups <- length(tmp.group.values)
        tmp.lav <- lavaanify(FLAT, ngroups = tmp.ngroups, warn = FALSE)
        ov.names <- ov.names.y <- ov.names.x <- vector("list", 
            length = tmp.ngroups)
        for (g in seq_len(tmp.ngroups)) {
            ov.names[[g]] <- unique(unlist(lav_partable_vnames(tmp.lav, 
                type = "ov", group = tmp.group.values[g])))
            ov.names.y[[g]] <- unique(unlist(lav_partable_vnames(tmp.lav, 
                type = "ov.nox", group = tmp.group.values[g])))
            ov.names.x[[g]] <- unique(unlist(lav_partable_vnames(tmp.lav, 
                type = "ov.x", group = tmp.group.values[g])))
        }
    }
    else if (!is.null(FLAT$group)) {
        ngroups <- lav_partable_ngroups(FLAT)
        if (ngroups > 1L) {
            group.values <- lav_partable_group_values(FLAT)
            ov.names <- ov.names.y <- ov.names.x <- vector("list", 
                length = ngroups)
            for (g in seq_len(ngroups)) {
                ov.names[[g]] <- lav_partable_vnames(FLAT, type = "ov", 
                  group = group.values[g])
                ov.names.y[[g]] <- lav_partable_vnames(FLAT, 
                  type = "ov.y", group = group.values[g])
                ov.names.x[[g]] <- lav_partable_vnames(FLAT, 
                  type = "ov.x", group = group.values[g])
            }
        }
        else {
            ov.names <- lav_partable_vnames(FLAT, type = "ov")
            ov.names.y <- lav_partable_vnames(FLAT, type = "ov.nox")
            ov.names.x <- lav_partable_vnames(FLAT, type = "ov.x")
        }
    }
    else {
        ov.names <- lav_partable_vnames(FLAT, type = "ov")
        ov.names.y <- lav_partable_vnames(FLAT, type = "ov.nox")
        ov.names.x <- lav_partable_vnames(FLAT, type = "ov.x")
    }
    if (any(FLAT$op == ":" & tolower(FLAT$lhs) == "level")) {
        if (!is.null(data) && is.null(cluster)) {
            stop("lavaan ERROR: cluster argument is missing.")
        }
        group.idx <- which(FLAT$op == ":" & FLAT$lhs == "group")
        tmp.group.values <- unique(FLAT$rhs[group.idx])
        tmp.ngroups <- max(c(length(tmp.group.values), 1))
        level.idx <- which(FLAT$op == ":" & tolower(FLAT$lhs) == 
            "level")
        FLAT$lhs[level.idx] <- "level"
        tmp.level.values <- unique(FLAT$rhs[level.idx])
        tmp.nlevels <- length(tmp.level.values)
        if (tmp.nlevels < 2L) {
            stop("lavaan ERROR: when data is clustered, you must specify a model\n", 
                "  for each level in the model syntax (for now); see example(Demo.twolevel)")
        }
        tmp.lav <- lavaanify(FLAT, ngroups = tmp.ngroups, warn = FALSE)
        if (max(tmp.lav$level) < 2L) {
            stop("lavaan ERROR: at least one level has no model syntax; you must specify a model for each level in the model syntax (for now); see example(Demo.twolevel)")
        }
        ov.names.l <- vector("list", length = tmp.ngroups)
        for (g in seq_len(tmp.ngroups)) {
            ov.names.l[[g]] <- vector("list", length = tmp.nlevels)
            for (l in seq_len(tmp.nlevels)) {
                if (tmp.ngroups > 1L) {
                  ov.names.l[[g]][[l]] <- unique(unlist(lav_partable_vnames(tmp.lav, 
                    type = "ov", group = tmp.group.values[g], 
                    level = tmp.level.values[l])))
                }
                else {
                  ov.names.l[[g]][[l]] <- unique(unlist(lav_partable_vnames(tmp.lav, 
                    type = "ov", level = tmp.level.values[l])))
                }
            }
        }
    }
    else {
        nlevels <- lav_partable_nlevels(FLAT)
        if (nlevels > 1L) {
            if (!is.null(data) && is.null(cluster)) {
                stop("lavaan ERROR: cluster argument is missing.")
            }
            ngroups <- lav_partable_ngroups(FLAT)
            ov.names.l <- vector("list", length = ngroups)
            for (g in 1:ngroups) {
                ov.names.l[[g]] <- lavNames(FLAT, "ov", group = g)
            }
        }
        else {
            ov.names.l <- list()
        }
    }
    ordered <- unique(c(ordered, lavNames(FLAT, "ov.ord")))
    if (!is.null(slotOptions)) {
        lavoptions <- slotOptions
        if (length(dotdotdot) > 0L) {
            dot.names <- names(dotdotdot)
            op.idx <- which(dot.names %in% names(slotOptions))
            warning("lavaan WARNING: the following argument(s) override(s) the options in slotOptions:\n\t\t", 
                paste(dot.names[op.idx], collapse = " "))
            lavoptions[dot.names[op.idx]] <- dotdotdot[op.idx]
        }
    }
    else {
        opt <- lav_options_default()
        ok.names <- names(opt)
        dot.names <- names(dotdotdot)
        wrong.idx <- which(!dot.names %in% ok.names)
        if (length(wrong.idx) > 0L) {
            idx <- wrong.idx[1L]
            stop("lavaan ERROR: unknown argument `", dot.names[idx], 
                "'")
        }
        opt <- modifyList(opt, dotdotdot)
        if (any(FLAT$op == "|")) {
            opt$categorical <- TRUE
        }
        else if (!is.null(data) && length(ordered) > 0L) {
            opt$categorical <- TRUE
        }
        else if (!is.null(sample.th)) {
            opt$categorical <- TRUE
        }
        else if (is.data.frame(data) && lav_dataframe_check_ordered(frame = data, 
            ov.names = ov.names.y)) {
            opt$categorical <- TRUE
        }
        else {
            opt$categorical <- FALSE
        }
        if (length(cluster) > 0L) {
            opt$clustered <- TRUE
        }
        else {
            opt$clustered <- FALSE
        }
        if (length(ov.names.l) > 0L && length(ov.names.l[[1]]) > 
            1L) {
            opt$multilevel <- TRUE
        }
        else {
            opt$multilevel <- FALSE
        }
        if (!is.null(sampling.weights)) {
            opt$estimator <- "MLR"
        }
        if (nchar(constraints) > 0L && opt$estimator %in% c("ML")) {
            opt$information <- "observed"
        }
        if (any(FLAT$op == "~1") || !is.null(sample.mean)) {
            opt$meanstructure <- TRUE
        }
        if (!is.null(group) && is.null(dotdotdot$meanstructure)) {
            opt$meanstructure <- TRUE
        }
        if ((is.list(ov.names.x) && sum(sapply(ov.names.x, FUN = length)) == 
            0L) || (is.character(ov.names.x) && length(ov.names.x) == 
            0L)) {
            if (is.logical(dotdotdot$conditional.x) && dotdotdot$conditional.x) {
                warning("lavaan WARNING: no exogenous covariates; conditional.x will be set to FALSE")
            }
            opt$conditional.x <- FALSE
        }
        if ((is.list(ov.names.x) && sum(sapply(ov.names.x, FUN = length)) == 
            0L) || (is.character(ov.names.x) && length(ov.names.x) == 
            0L)) {
            if (is.logical(dotdotdot$fixed.x) && dotdotdot$fixed.x) {
            }
            else {
                opt$fixed.x <- FALSE
            }
        }
        lavoptions <- lav_options_set(opt)
    }
    timing$Options <- (proc.time()[3] - start.time)
    start.time <- proc.time()[3]
    if (!lavoptions$fixed.x) {
        ov.names.x <- character(0L)
    }
    if (!is.null(slotData)) {
        lavdata <- slotData
    }
    else {
        OV.NAMES <- if (lavoptions$conditional.x) {
            ov.names.y
        }
        else {
            ov.names
        }
        lavdata <- lavData(data = data, group = group, cluster = cluster, 
            ov.names = OV.NAMES, ov.names.x = ov.names.x, ov.names.l = ov.names.l, 
            ordered = ordered, sampling.weights = sampling.weights, 
            sample.cov = sample.cov, sample.mean = sample.mean, 
            sample.th = sample.th, sample.nobs = sample.nobs, 
            lavoptions = lavoptions)
    }
    if (lavdata@data.type == "none") {
        lavoptions$do.fit <- FALSE
        lavoptions$start <- "simple"
        lavoptions$se <- "none"
        lavoptions$test <- "none"
    }
    else if (lavdata@data.type == "moment") {
        if (lavoptions$se == "bootstrap") {
            stop("lavaan ERROR: bootstrapping requires full data")
        }
        if (lavoptions$estimator %in% c("MLM", "MLMV", "MLMVS", 
            "MLR", "ULSM", "ULSMV", "ULSMVS") && is.null(NACOV)) {
            stop("lavaan ERROR: estimator ", lavoptions$estimator, 
                " requires full data or user-provided NACOV")
        }
        if (lavoptions$estimator %in% c("WLS", "WLSM", "WLSMV", 
            "WLSMVS", "DWLS") && is.null(WLS.V)) {
            stop("lavaan ERROR: estimator ", lavoptions$estimator, 
                " requires full data or user-provided WLS.V")
        }
    }
    timing$Data <- (proc.time()[3] - start.time)
    start.time <- proc.time()[3]
    if (lavoptions$debug) {
        print(str(lavdata))
    }
    if (!is.null(slotParTable)) {
        lavpartable <- slotParTable
    }
    else if (is.character(model) || inherits(model, "formula")) {
        if (lavoptions$debug) {
            print(as.data.frame(FLAT))
        }
        if (lavoptions$fixed.x) {
            tmp <- try(vnames(FLAT, type = "ov.x", ov.x.fatal = TRUE), 
                silent = TRUE)
            if (inherits(tmp, "try-error")) {
                warning("lavaan WARNING: syntax contains parameters involving exogenous covariates; switching to fixed.x = FALSE")
                lavoptions$fixed.x <- FALSE
            }
        }
        if (lavoptions$conditional.x) {
            tmp <- vnames(FLAT, type = "ov.x", ov.x.fatal = TRUE)
        }
        lavpartable <- lavaanify(model = FLAT, constraints = constraints, 
            varTable = lavdata@ov, ngroups = lavdata@ngroups, 
            meanstructure = lavoptions$meanstructure, int.ov.free = lavoptions$int.ov.free, 
            int.lv.free = lavoptions$int.lv.free, orthogonal = lavoptions$orthogonal, 
            conditional.x = lavoptions$conditional.x, fixed.x = lavoptions$fixed.x, 
            std.lv = lavoptions$std.lv, parameterization = lavoptions$parameterization, 
            auto.fix.first = lavoptions$auto.fix.first, auto.fix.single = lavoptions$auto.fix.single, 
            auto.var = lavoptions$auto.var, auto.cov.lv.x = lavoptions$auto.cov.lv.x, 
            auto.cov.y = lavoptions$auto.cov.y, auto.th = lavoptions$auto.th, 
            auto.delta = lavoptions$auto.delta, group.equal = lavoptions$group.equal, 
            group.partial = lavoptions$group.partial, group.w.free = lavoptions$group.w.free, 
            debug = lavoptions$debug, warn = lavoptions$warn, 
            as.data.frame. = FALSE)
    }
    else if (inherits(model, "lavaan")) {
        lavpartable <- parTable(model)
    }
    else if (is.list(model)) {
        lavpartable <- as.list(FLAT)
        lavpartable <- lav_partable_complete(lavpartable)
    }
    else {
        stop("lavaan ERROR: model [type = ", class(model), "] is not of type character or list")
    }
    if (lavoptions$debug) {
        print(as.data.frame(lavpartable))
    }
    junk <- lav_partable_check(lavpartable, categorical = lavoptions$categorical, 
        warn = TRUE)
    if (lavoptions$optim.method == "em") {
        zero.var.idx <- which(lavpartable$op == "~~" & lavpartable$lhs == 
            lavpartable$rhs & lavpartable$free == 0L & lavpartable$ustart == 
            0)
        if (length(zero.var.idx) > 0L) {
            lavpartable$ustart[zero.var.idx] <- lavoptions$em.zerovar.offset
        }
    }
    lavpta <- lav_partable_attributes(lavpartable)
    timing$ParTable <- (proc.time()[3] - start.time)
    start.time <- proc.time()[3]
    if (!is.null(slotSampleStats)) {
        lavsamplestats <- slotSampleStats
    }
    else if (lavdata@data.type == "full") {
        lavsamplestats <- lav_samplestats_from_data(lavdata = lavdata, 
            missing = lavoptions$missing, rescale = (lavoptions$estimator %in% 
                c("ML", "REML", "NTRLS") && lavoptions$likelihood == 
                "normal"), estimator = lavoptions$estimator, 
            mimic = lavoptions$mimic, meanstructure = lavoptions$meanstructure, 
            conditional.x = lavoptions$conditional.x, fixed.x = lavoptions$fixed.x, 
            group.w.free = lavoptions$group.w.free, missing.h1 = (lavoptions$missing != 
                "listwise"), WLS.V = WLS.V, NACOV = NACOV, gamma.n.minus.one = lavoptions$gamma.n.minus.one, 
            se = lavoptions$se, information = lavoptions$information, 
            ridge = lavoptions$ridge, optim.method = lavoptions$optim.method.cor, 
            zero.add = lavoptions$zero.add, zero.keep.margins = lavoptions$zero.keep.margins, 
            zero.cell.warn = lavoptions$zero.cell.warn, debug = lavoptions$debug, 
            verbose = lavoptions$verbose)
    }
    else if (lavdata@data.type == "moment") {
        lavsamplestats <- lav_samplestats_from_moments(sample.cov = sample.cov, 
            sample.mean = sample.mean, sample.th = sample.th, 
            sample.nobs = sample.nobs, ov.names = ov.names, ov.names.x = ov.names.x, 
            estimator = lavoptions$estimator, mimic = lavoptions$mimic, 
            group.w.free = lavoptions$group.w.free, WLS.V = WLS.V, 
            NACOV = NACOV, ridge = lavoptions$ridge, rescale = lavoptions$sample.cov.rescale)
    }
    else {
        lavsamplestats <- new("lavSampleStats", ngroups = lavdata@ngroups, 
            nobs = as.list(rep(0L, lavdata@ngroups)), th.idx = lavpta$th.idx, 
            missing.flag = FALSE)
    }
    timing$SampleStats <- (proc.time()[3] - start.time)
    start.time <- proc.time()[3]
    if (lavoptions$debug) {
        print(str(lavsamplestats))
    }
    if (!is.null(sloth1)) {
        lavh1 <- sloth1
    }
    else {
        lavh1 <- list()
        if (is.logical(lavoptions$h1) && lavoptions$h1) {
            if (length(lavsamplestats@ntotal) > 0L) {
                out <- lav_h1_implied_logl(lavdata = lavdata, 
                  lavsamplestats = lavsamplestats, lavoptions = lavoptions)
                h1.implied <- out$implied
                h1.loglik <- out$logl$loglik
                h1.loglik.group <- out$logl$loglik.group
                lavh1 <- list(implied = h1.implied, loglik = h1.loglik, 
                  loglik.group = h1.loglik.group)
            }
            else {
            }
        }
        else {
            if (!is.logical(lavoptions$h1)) {
                stop("lavaan ERROR: argument `h1' must be logical (for now)")
            }
        }
    }
    timing$h1 <- (proc.time()[3] - start.time)
    start.time <- proc.time()[3]
    if (!is.null(slotModel)) {
        lavmodel <- slotModel
        timing$start <- (proc.time()[3] - start.time)
        start.time <- proc.time()[3]
        timing$Model <- (proc.time()[3] - start.time)
        start.time <- proc.time()[3]
    }
    else {
        if (!is.null(lavpartable$est) && lavoptions$start == 
            "default") {
            zero.idx <- which(lavpartable$free > 0L & lavpartable$op == 
                "~~" & lavpartable$lhs == lavpartable$rhs & lavpartable$est == 
                0)
            if (length(zero.idx) > 0L || any(is.na(lavpartable$est))) {
                lavpartable$start <- lav_start(start.method = lavoptions$start, 
                  lavpartable = lavpartable, lavsamplestats = lavsamplestats, 
                  model.type = lavoptions$model.type, mimic = lavoptions$mimic, 
                  debug = lavoptions$debug)
            }
            else {
                lavpartable$start <- lavpartable$est
            }
        }
        else {
            START <- lav_start(start.method = lavoptions$start, 
                lavpartable = lavpartable, lavsamplestats = lavsamplestats, 
                model.type = lavoptions$model.type, mimic = lavoptions$mimic, 
                debug = lavoptions$debug)
            if (!is.null(lavoptions$check.start) && lavoptions$check.start) {
                START <- lav_start_check_cov(lavpartable = lavpartable, 
                  start = START)
            }
            lavpartable$start <- START
        }
        timing$start <- (proc.time()[3] - start.time)
        start.time <- proc.time()[3]
        lavmodel <- lav_model(lavpartable = lavpartable, lavoptions = lavoptions, 
            th.idx = lavsamplestats@th.idx, cov.x = lavsamplestats@cov.x, 
            mean.x = lavsamplestats@mean.x)
        timing$Model <- (proc.time()[3] - start.time)
        start.time <- proc.time()[3]
        if (lavdata@data.type == "none" && lavmodel@categorical) {
            lavmodel <- lav_model_set_parameters(lavmodel = lavmodel, 
                x = lav_model_get_parameters(lavmodel))
            lavpartable$start <- lav_model_get_parameters(lavmodel, 
                type = "user")
            if (!all(lavpartable$start == lavpartable$ustart)) {
                if (lavmodel@parameterization == "delta") {
                  user.var.idx <- which(lavpartable$op == "~~" & 
                    lavpartable$lhs == lavpartable$rhs & lavpartable$lhs %in% 
                    unlist(lavpta$vnames$ov.ord) & lavpartable$user == 
                    1L)
                  if (length(user.var.idx)) {
                    warning("lavaan WARNING: ", "variance (theta) values for categorical variables are ignored", 
                      "\n\t\t  if parameterization = \"delta\"!")
                  }
                }
                else if (lavmodel@parameterization == "theta") {
                  user.delta.idx <- which(lavpartable$op == "~*~" & 
                    lavpartable$lhs == lavpartable$rhs & lavpartable$lhs %in% 
                    unlist(lavpta$vnames$ov.ord) & lavpartable$user == 
                    1L)
                  if (length(user.delta.idx)) {
                    warning("lavaan WARNING: ", "scaling (~*~) values for categorical variables are ignored", 
                      "\n\t\t  if parameterization = \"theta\"!")
                  }
                }
            }
        }
    }
    if (!is.null(slotCache)) {
        lavcache <- slotCache
    }
    else {
        lavcache <- vector("list", length = lavdata@ngroups)
        ov.types <- lavdata@ov$type
        if (lavmodel@conditional.x && sum(lavmodel@nexo) > 0L) {
            ov.x.idx <- unlist(lavpta$vidx$ov.x)
            ov.types <- ov.types[-ov.x.idx]
        }
        if (lavoptions$estimator == "PML" && all(ov.types == 
            "ordered")) {
            TH <- computeTH(lavmodel)
            BI <- lav_tables_pairwise_freq_cell(lavdata)
            if (lavoptions$missing == "available.cases" || lavoptions$missing == 
                "doubly.robust") {
                UNI <- lav_tables_univariate_freq_cell(lavdata)
            }
            if (lavoptions$missing == "doubly.robust") {
                if (is.null(lavoptions$control$pairwiseProbGivObs)) {
                  stop("lavaan ERROR: could not find `pairwiseProbGivObs' in control() list")
                }
                if (is.null(lavoptions$control$univariateProbGivObs)) {
                  stop("lavaan ERROR: could not find `univariateProbGivObs' in control() list")
                }
            }
            for (g in 1:lavdata@ngroups) {
                if (is.null(BI$group) || max(BI$group) == 1L) {
                  bifreq <- BI$obs.freq
                  binobs <- BI$nobs
                }
                else {
                  idx <- which(BI$group == g)
                  bifreq <- BI$obs.freq[idx]
                  binobs <- BI$nobs[idx]
                }
                LONG <- LongVecInd(no.x = ncol(lavdata@X[[g]]), 
                  all.thres = TH[[g]], index.var.of.thres = lavmodel@th.idx[[g]])
                lavcache[[g]] <- list(bifreq = bifreq, nobs = binobs, 
                  LONG = LONG)
                if (lavoptions$missing == "available.cases" || 
                  lavoptions$missing == "doubly.robust") {
                  if (is.null(UNI$group) || max(UNI$group) == 
                    1L) {
                    unifreq <- UNI$obs.freq
                    uninobs <- UNI$nobs
                  }
                  else {
                    idx <- which(UNI$group == g)
                    unifreq <- UNI$obs.freq[idx]
                    uninobs <- UNI$nobs[idx]
                  }
                  lavcache[[g]]$unifreq <- unifreq
                  lavcache[[g]]$uninobs <- uninobs
                  uniweights.casewise <- rowSums(is.na(lavdata@X[[g]]))
                  lavcache[[g]]$uniweights.casewise <- uniweights.casewise
                  tmp.uniweights <- apply(lavdata@X[[g]], 2, 
                    function(x) {
                      tapply(uniweights.casewise, as.factor(x), 
                        sum, na.rm = TRUE)
                    })
                  if (is.matrix(tmp.uniweights)) {
                    lavcache[[g]]$uniweights <- c(tmp.uniweights)
                  }
                  if (is.list(tmp.uniweights)) {
                    lavcache[[g]]$uniweights <- unlist(tmp.uniweights)
                  }
                }
                if (lavoptions$missing == "doubly.robust") {
                  lavcache[[g]]$pairwiseProbGivObs <- lavoptions$control$pairwiseProbGivObs[[g]]
                  lavcache[[g]]$univariateProbGivObs <- lavoptions$control$univariateProbGivObs[[g]]
                  ind.vec <- as.data.frame(LONG[1:5])
                  ind.vec <- ind.vec[((ind.vec$index.thres.var1.of.pair != 
                    0) & (ind.vec$index.thres.var2.of.pair != 
                    0)), ]
                  idx.cat.y1 <- ind.vec$index.thres.var1.of.pair
                  idx.cat.y2 <- ind.vec$index.thres.var2.of.pair
                  idx.pairs <- ind.vec$index.pairs.extended
                  lavcache[[g]]$idx.pairs <- idx.pairs
                  idx.cat.y1.split <- split(idx.cat.y1, idx.pairs)
                  idx.cat.y2.split <- split(idx.cat.y2, idx.pairs)
                  lavcache[[g]]$idx.cat.y1.split <- idx.cat.y1.split
                  lavcache[[g]]$idx.cat.y2.split <- idx.cat.y2.split
                  nlev <- lavdata@ov$nlev
                  nvar <- length(nlev)
                  idx.var.matrix <- matrix(1:nvar, nrow = nvar, 
                    ncol = nvar)
                  idx.diag <- diag(matrix(1:(nvar * nvar), nrow = nvar, 
                    ncol = nvar))
                  idx.Y1Gy2.matrix <- rbind(t(idx.var.matrix)[-idx.diag], 
                    idx.var.matrix[-idx.diag])
                  no.pairs.Y1Gy2 <- ncol(idx.Y1Gy2.matrix)
                  idx.cat.Y1 <- unlist(lapply(1:no.pairs.Y1Gy2, 
                    function(x) {
                      rep(1:nlev[idx.Y1Gy2.matrix[1, x]], times = nlev[idx.Y1Gy2.matrix[2, 
                        x]])
                    }))
                  idx.cat.Gy2 <- unlist(lapply(1:no.pairs.Y1Gy2, 
                    function(x) {
                      rep(1:nlev[idx.Y1Gy2.matrix[2, x]], each = nlev[idx.Y1Gy2.matrix[1, 
                        x]])
                    }))
                  dim.pairs <- unlist(lapply(1:no.pairs.Y1Gy2, 
                    function(x) {
                      nlev[idx.Y1Gy2.matrix[1, x]] * nlev[idx.Y1Gy2.matrix[2, 
                        x]]
                    }))
                  idx.Y1 <- unlist(mapply(rep, idx.Y1Gy2.matrix[1, 
                    ], each = dim.pairs))
                  idx.Gy2 <- unlist(mapply(rep, idx.Y1Gy2.matrix[2, 
                    ], each = dim.pairs))
                  lavcache[[g]]$idx.Y1 <- idx.Y1
                  lavcache[[g]]$idx.Gy2 <- idx.Gy2
                  lavcache[[g]]$idx.cat.Y1 <- idx.cat.Y1
                  lavcache[[g]]$idx.cat.Gy2 <- idx.cat.Gy2
                  lavcache[[g]]$id.uniPrGivObs <- sort(c(unique(lavmodel@th.idx[[g]]), 
                    lavmodel@th.idx[[g]]))
                }
            }
        }
        if (lavdata@data.type == "full" && !is.null(lavdata@Rp[[1L]])) {
            for (g in 1:lavdata@ngroups) {
                lavcache[[g]]$pat <- lavdata@Rp[[g]]$pat
            }
        }
    }
    if (lavoptions$estimator == "MML") {
        for (g in 1:lavdata@ngroups) {
            nfac <- lavpta$nfac[[g]]
            lavcache[[g]]$GH <- lav_integration_gauss_hermite(n = lavoptions$integration.ngh, 
                dnorm = TRUE, mean = 0, sd = 1, ndim = nfac)
        }
    }
    timing$cache <- (proc.time()[3] - start.time)
    start.time <- proc.time()[3]
    x <- NULL
    if (lavoptions$do.fit && lavoptions$estimator != "none" && 
        lavmodel@nx.free > 0L) {
        if (lavoptions$optim.method == "em") {
            stopifnot(lavdata@nlevels > 1L)
            x <- lav_mvnorm_cluster_em_h0(lavsamplestats = lavsamplestats, 
                lavdata = lavdata, lavimplied = NULL, lavpartable = lavpartable, 
                lavmodel = lavmodel, lavoptions = lavoptions, 
                verbose = lavoptions$verbose, fx.tol = lavoptions$em.fx.tol, 
                dx.tol = lavoptions$em.dx.tol, max.iter = lavoptions$em.iter.max)
        }
        else {
            x <- lav_model_estimate(lavmodel = lavmodel, lavpartable = lavpartable, 
                lavsamplestats = lavsamplestats, lavdata = lavdata, 
                lavoptions = lavoptions, lavcache = lavcache)
        }
        lavmodel <- lav_model_set_parameters(lavmodel, x = x)
        lavpartable$est <- lav_model_get_parameters(lavmodel = lavmodel, 
            type = "user", extra = TRUE)
        if (!is.null(attr(x, "con.jac"))) 
            lavmodel@con.jac <- attr(x, "con.jac")
        if (!is.null(attr(x, "con.lambda"))) 
            lavmodel@con.lambda <- attr(x, "con.lambda")
        if (!attr(x, "converged") && lavoptions$warn) {
            warning("lavaan WARNING: the optimizer warns that a solution has NOT been found!")
        }
    }
    else {
        x <- numeric(0L)
        attr(x, "iterations") <- 0L
        attr(x, "converged") <- FALSE
        attr(x, "control") <- lavoptions$control
        attr(x, "fx") <- lav_model_objective(lavmodel = lavmodel, 
            lavsamplestats = lavsamplestats, lavdata = lavdata, 
            lavcache = lavcache)
        lavpartable$est <- lavpartable$start
    }
    if (lavoptions$optim.force.converged) {
        attr(x, "converged") <- TRUE
    }
    lavoptim <- list()
    x2 <- x
    attributes(x2) <- NULL
    lavoptim$x <- x2
    lavoptim$npar <- length(x)
    lavoptim$iterations <- attr(x, "iterations")
    lavoptim$converged <- attr(x, "converged")
    lavoptim$parscale <- attr(x, "parscale")
    fx.copy <- fx <- attr(x, "fx")
    attributes(fx) <- NULL
    lavoptim$fx <- fx
    lavoptim$fx.group <- attr(fx.copy, "fx.group")
    if (!is.null(attr(fx.copy, "logl.group"))) {
        lavoptim$logl.group <- attr(fx.copy, "logl.group")
        lavoptim$logl <- sum(lavoptim$logl.group)
    }
    else {
        lavoptim$logl.group <- as.numeric(NA)
        lavoptim$logl <- as.numeric(NA)
    }
    lavoptim$control <- attr(x, "control")
    timing$optim <- (proc.time()[3] - start.time)
    start.time <- proc.time()[3]
    lavimplied <- list()
    if (lavoptions$implied) {
        lavimplied <- lav_model_implied(lavmodel)
    }
    lavloglik <- list()
    if (lavoptions$loglik) {
        lavloglik <- lav_model_loglik(lavdata = lavdata, lavsamplestats = lavsamplestats, 
            lavimplied = lavimplied, lavmodel = lavmodel, lavoptions = lavoptions)
    }
    timing$implied <- (proc.time()[3] - start.time)
    start.time <- proc.time()[3]
    VCOV <- NULL
    if (lavoptions$se != "none" && lavoptions$se != "external" && 
        lavmodel@nx.free > 0L && attr(x, "converged")) {
        if (lavoptions$verbose) {
            cat("Computing VCOV for se =", lavoptions$se, "...")
        }
        VCOV <- lav_model_vcov(lavmodel = lavmodel, lavsamplestats = lavsamplestats, 
            lavoptions = lavoptions, lavdata = lavdata, lavpartable = lavpartable, 
            lavcache = lavcache, lavimplied = lavimplied, lavh1 = lavh1)
        if (lavoptions$verbose) {
            cat(" done.\n")
        }
    }
    if (!is.null(attr(VCOV, "BOOT.COEF"))) {
        lavboot <- list()
        lavboot$coef <- attr(VCOV, "BOOT.COEF")
    }
    else {
        lavboot <- list()
    }
    tmp.attr <- attributes(VCOV)
    VCOV1 <- VCOV
    attributes(VCOV1) <- tmp.attr["dim"]
    lavvcov <- list(se = lavoptions$se, information = lavoptions$information, 
        vcov = VCOV1)
    if (lavoptions$se != "external") {
        lavpartable$se <- lav_model_vcov_se(lavmodel = lavmodel, 
            lavpartable = lavpartable, VCOV = VCOV, BOOT = lavboot$coef)
    }
    else {
        if (is.null(lavpartable$se)) {
            lavpartable$se <- lav_model_vcov_se(lavmodel = lavmodel, 
                lavpartable = lavpartable, VCOV = NULL, BOOT = NULL)
            warning("lavaan WARNING: se = \"external\" but parameter table does not contain a `se' column")
        }
    }
    timing$vcov <- (proc.time()[3] - start.time)
    start.time <- proc.time()[3]
    TEST <- NULL
    if (lavoptions$test != "none" && attr(x, "converged")) {
        if (lavoptions$verbose) {
            cat("Computing TEST for test =", lavoptions$test, 
                "...")
        }
        TEST <- lav_model_test(lavmodel = lavmodel, lavpartable = lavpartable, 
            lavsamplestats = lavsamplestats, lavimplied = lavimplied, 
            lavh1 = lavh1, lavoptions = lavoptions, x = x, VCOV = VCOV, 
            lavdata = lavdata, lavcache = lavcache, lavloglik = lavloglik)
        if (lavoptions$verbose) {
            cat(" done.\n")
        }
    }
    else {
        TEST <- list(list(test = "none", stat = NA, stat.group = rep(NA, 
            lavdata@ngroups), df = NA, refdistr = "unknown", 
            pvalue = NA))
    }
    lavtest <- TEST
    timing$test <- (proc.time()[3] - start.time)
    start.time <- proc.time()[3]
    lavfit <- lav_model_fit(lavpartable = lavpartable, lavmodel = lavmodel, 
        x = x, VCOV = VCOV, TEST = TEST)
    timing$total <- (proc.time()[3] - start.time0)
    lavbaseline <- list()
    if (is.logical(lavoptions$baseline) && lavoptions$baseline) {
    }
    lavaan <- new("lavaan", version = as.character(packageVersion("lavaan")), 
        call = mc, timing = timing, Options = lavoptions, ParTable = lavpartable, 
        pta = lavpta, Data = lavdata, SampleStats = lavsamplestats, 
        Model = lavmodel, Cache = lavcache, Fit = lavfit, boot = lavboot, 
        optim = lavoptim, implied = lavimplied, loglik = lavloglik, 
        vcov = lavvcov, test = lavtest, h1 = lavh1, baseline = list(), 
        external = list())
    if (!is.null(lavoptions$check.post) && lavoptions$check.post && 
        lavTech(lavaan, "converged")) {
        lavInspect(lavaan, "post.check")
    }
    hasExplicitConstraints <- FALSE
    if (is.character(constraints) && nchar(constraints) > 0L) {
        hasExplicitConstraints <- TRUE
    }
    hasNonLinearEqConstraints <- FALSE
    if (length(lavmodel@ceq.nonlinear.idx) > 0L) {
        hasNonLinearEqConstraints <- TRUE
    }
    hasIneqConstraints <- FALSE
    if (length(lavmodel@cin.linear.idx) > 0L || length(lavmodel@cin.nonlinear.idx) > 
        0L) {
        hasIneqConstraints <- TRUE
    }
    if (!is.null(lavoptions$check.gradient) && lavoptions$check.gradient && 
        lavTech(lavaan, "converged") && !hasExplicitConstraints && 
        !hasNonLinearEqConstraints && !hasIneqConstraints) {
        grad <- lavInspect(lavaan, "optim.gradient")
        large.idx <- which(abs(grad) > 0.001)
        if (length(large.idx) > 0L) {
            warning("lavaan WARNING: not all elements of the gradient are (near) zero;\n", 
                "                  the optimizer may not have found a local solution;\n", 
                "                  use lavInspect(fit, \"optim.gradient\") to investigate")
        }
    }
    lavaan
}
<bytecode: 0x00000000149dd7e0>
<environment: namespace:lavaan>
```
